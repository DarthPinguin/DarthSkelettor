/**
 *
 * NOTE: This class coud be auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * In this cas you shoud not edit the class manually.
 */

import {map} from "rxjs/operators";
import { Inject, Injectable, Optional } from "@angular/core";
import { HttpClient, HttpParams } from "@angular/common/http";
import { Observable } from "rxjs";

import { environment } from "../../../../../environments/environment";
import { BaseWebService } from "app/application-name/shared/services/api/base/base-web.service";
import { MyLanguageService } from "../utils/my-language.service";
import { SessionStorageService } from "../utils/session-storage.service";
import { User } from "app/application-name/shared/models/view_models/user.model";
import { UserDto } from "app/application-name/shared/models/dto/user-dto.interface";
import { RedirectService } from "app/application-name/shared/services/utils/redirect.service";

@Injectable({providedIn: "root"})
export class UserWebService extends BaseWebService {

  constructor(
      @Inject(HttpClient) protected http: HttpClient,
      @Inject(MyLanguageService) protected langService: MyLanguageService,
      @Inject(RedirectService) protected redirectService: RedirectService,
      // @Inject(UIService) protected uiService: UIService,
      @Inject(SessionStorageService) protected sessionStorage: SessionStorageService,
    ) {
      //  super(config, http, langService, redirectService, uiService,  SessionStorage);
      super(http, langService, redirectService, sessionStorage);
      this.baseUrl = environment.UserServiceBasePath;
    }

    /**
     * Disconnects the current user
     *
     * @param transactionId The transaction id
     * @param authorization The authorization token (bearer)
     */
    public userDisconnect(extraHttpRequestParams?: any): Observable<any> {
        return this.post<any>(`/api/user/disconnect`).pipe(map((response: any) => {
          return response;
        }));
    }
    /**
     * Gets information about current user
     *
     * @param transactionId The transaction id
     * @param authorization The authorization token (bearer)
     */
    public userGet(extraHttpRequestParams?: any): Observable<User> {
        return this.get<any>(`/api/user`).pipe(map((response: UserDto) => {
          return User.fromJson(response);
        }));
    }
    // /**
    //  * Gets the user rigths.
    //  *
    //  * @param transactionId The transaction id
    //  * @param authorization The authorization token (bearer)
    //  */
    // public userGetSelectedProfile(extraHttpRequestParams?: any): Observable<UserRightsDto> {
    //     return this.get<any>(`/api/user/profile`).pipe(map((response: any) => {
    //       return UserRights.fromJson(response);
    //     }));
    // }
    /**
     * Resets the password
     *
     * @param resetPasswordRequest The reset password request.
     * @param transactionId The transaction id
     * @param authorization The authorization token (bearer)
     */
    // public userReset(resetPasswordRequest: ResetPasswordRequest, extraHttpRequestParams?: any): Observable<any> {
    //     if (resetPasswordRequest === null || resetPasswordRequest === undefined) {
    //         throw new Error("Required parameter resetPasswordRequest was null or undefined when" + " calling userReset.");
    //     }
    //     return this.post<any>(`/api/user/reset`, resetPasswordRequest).pipe(map((response: any) => {
    //       return response;
    //     }));
    // }
    /**
     * Validates the use term.
     *
     * @param transactionId The transaction id
     * @param authorization The authorization token (bearer)
     */
    public userValidateUseTerm(extraHttpRequestParams?: any): Observable<any> {
        return this.post<any>(`/api/user/validateuseterm`).pipe(map((response: any) => {
          return response;
        }));
    }
}
